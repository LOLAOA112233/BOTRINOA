import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import pandas as pd
import os

buttons = [
    ["V·ªÜ SINH 10P", "V·ªÜ SINH 15P"],
    ["üîô ƒê√É QUAY L·∫†I"]
]
keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

time_limits = {
    "V·ªÜ SINH 10P": 10,
    "V·ªÜ SINH 15P": 15
}

max_counts = {
    "V·ªÜ SINH 10P": 5,
    "V·ªÜ SINH 15P": 1
}

data_store = {}

def format_duration(minutes):
    seconds = int(minutes * 60)
    return str(datetime.timedelta(seconds=seconds))

def format_seconds(seconds):
    seconds = int(round(seconds))
    minutes, sec = divmod(seconds, 60)
    return f"{minutes} ph√∫t {sec} gi√¢y" if minutes else f"{sec} gi√¢y"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o b·∫°n! Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if chat_id not in data_store:
        data_store[chat_id] = {}

    if text not in sum(buttons, []) and len(text) >= 1:
        context.user_data['current_name'] = text.upper()
        name = context.user_data['current_name']
        if name not in data_store[chat_id]:
            data_store[chat_id][name] = {"actions": {}}
        await update.message.reply_text(
            f"Ch√†o {name}! B·∫°n c√≥ th·ªÉ ch·ªçn m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
            reply_markup=keyboard
        )
        return

    if 'current_name' not in context.user_data:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªõc khi thao t√°c.", reply_markup=keyboard)
        return

    name = context.user_data['current_name']
    user_data = data_store[chat_id][name]

    now = datetime.datetime.now()

    if text == "üîô ƒê√É QUAY L·∫†I":
        msg = f"üîö {name} ƒë√£ k·∫øt th√∫c. Th·ªëng k√™:\n"
        for action, info in user_data["actions"].items():
            if info.get("start_time") is not None:
                # C·∫≠p nh·∫≠t th·ªùi gian c√≤n dang d·ªü
                duration_sec = (now - info["start_time"]).total_seconds()
                info["last_duration"] = duration_sec
                info["durations"].append(duration_sec)
                info["total_time"] += duration_sec
                info["start_time"] = None

            count = info.get("count", 0)
            total_time = info.get("total_time", 0)
            last_duration = info.get("last_duration", 0)

            warn = []
            max_count = max_counts.get(action)
            max_time = time_limits.get(action)
            if max_count is not None and count > max_count:
                warn.append(f"v∆∞·ª£t s·ªë l·∫ßn ({count}/{max_count})")
            if max_time is not None and total_time > max_time * 60 * count:
                warn.append(f"v∆∞·ª£t th·ªùi gian ({format_seconds(total_time)})")

            warning_text = " ‚ö†Ô∏è " + ", ".join(warn) if warn else ""

            msg += (
                f"- {action} l·∫ßn n√†y l√†: {format_seconds(last_duration)}\n"
                f"  T·ªïng th·ªùi gian ƒë√£ s·ª≠ d·ª•ng: {format_seconds(total_time)} ({count} l·∫ßn){warning_text}\n"
            )

        await update.message.reply_text(msg, reply_markup=keyboard)
        return

    if text in sum(buttons, []):
        action = text
        now = datetime.datetime.now()

        if action not in user_data["actions"]:
            user_data["actions"][action] = {
                "count": 0,
                "total_time": 0.0,
                "start_time": None,
                "last_duration": 0.0,
                "durations": []
            }

        info = user_data["actions"][action]

        # N·∫øu ƒë√£ ƒëang th·ª±c hi·ªán h√†nh ƒë·ªông n√†y
        if info["start_time"] is not None:
            elapsed_sec = (now - info["start_time"]).total_seconds()
            start_str = info["start_time"].strftime("%H:%M:%S")
            await update.message.reply_text(
                f"‚ö†Ô∏è B·∫°n ƒëang th·ª±c hi·ªán {action} t·ª´ {start_str}, ƒë√£ ƒë∆∞·ª£c {format_seconds(elapsed_sec)}.",
                reply_markup=keyboard
            )
            return

        # N·∫øu v∆∞·ª£t qu√° s·ªë l·∫ßn
        if max_counts.get(action) is not None and info["count"] >= max_counts[action]:
            await update.message.reply_text(
                f"‚ö†Ô∏è B·∫°n ƒë√£ v∆∞·ª£t s·ªë l·∫ßn t·ªëi ƒëa cho {action}.",
                reply_markup=keyboard
            )
            return

        info["count"] += 1
        info["start_time"] = now

        msg = f"{name} ƒë√£ b·∫Øt ƒë·∫ßu {action} l√∫c {now.strftime('%H:%M:%S')}."
        max_time = time_limits.get(action)
        if max_time:
            msg += f" Gi·ªõi h·∫°n {max_time} ph√∫t m·ªói l·∫ßn."

        await update.message.reply_text(msg, reply_markup=keyboard)
        return

    await update.message.reply_text(
        "Vui l√≤ng nh·∫≠p t√™n n·∫øu ch∆∞a c√≥ ho·∫∑c ch·ªçn m·ª•c b√™n d∆∞·ªõi.",
        reply_markup=keyboard
    )

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    if chat_id not in data_store or not data_store[chat_id]:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
        return

    rows = []
    now = datetime.datetime.now()

    for name, user_data in data_store[chat_id].items():
        for action, info in user_data.get("actions", {}).items():
            # N·∫øu v·∫´n ƒëang th·ª±c hi·ªán, c·∫≠p nh·∫≠t th√™m th·ªùi gian
            if info.get("start_time") is not None:
                duration_sec = (now - info["start_time"]).total_seconds()
                info["last_duration"] = duration_sec
                info["durations"].append(duration_sec)
                info["total_time"] += duration_sec
                info["start_time"] = None

            count = info.get("count", 0)
            total_time = info.get("total_time", 0)
            durations = [format_seconds(d) for d in info.get("durations", [])]
            rows.append({
                "T√™n nh√¢n vi√™n": name,
                "H√†nh ƒë·ªông": action,
                "S·ªë l·∫ßn": count,
                "T·ªïng th·ªùi gian (ph√∫t)": round(total_time / 60, 1),
                "T·ªïng th·ªùi gian chi ti·∫øt": format_seconds(total_time),
                "Danh s√°ch th·ªùi gian t·ª´ng l·∫ßn (hh:mm:ss)": ", ".join(durations)
            })

    if not rows:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt ƒë·ªÉ xu·∫•t.")
        return

    df = pd.DataFrame(rows)
    filename = f"data_{chat_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    df.to_excel(filename, index=False)

    with open(filename, "rb") as f:
        await update.message.reply_document(f)

    os.remove(filename)
    data_store[chat_id] = {}

    await update.message.reply_text("‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu v√† reset l·∫°i th·ªëng k√™ nh√≥m.")

if __name__ == "__main__":
    import logging
    from telegram.ext import Application

    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    TOKEN = "7842867457:AAHwUVSHYYPGOd94LJzUxM9JvxImRY7fU6Y"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("Bot ƒë√£ ch·∫°y...")
    app.run_polling()
