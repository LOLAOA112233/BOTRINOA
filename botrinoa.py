import os
import datetime
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import pandas as pd

# Logger setup
def setup_logger():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    return logging.getLogger(__name__)

logger = setup_logger()

# Keyboard buttons
buttons = [
    ["V·ªÜ SINH 10P", "V·ªÜ SINH 15P"],
    ["üîô ƒê√É QUAY L·∫†I"]
]
keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

# Limits
time_limits = {"V·ªÜ SINH 10P": 10, "V·ªÜ SINH 15P": 15}
max_counts = {"V·ªÜ SINH 10P": 5, "V·ªÜ SINH 15P": 1}

# In-memory data storage: {chat_id: {name: {actions: {...}}}}
data_store = {}

# Utils
def format_seconds(seconds):
    seconds = int(round(seconds))
    minutes, sec = divmod(seconds, 60)
    return f"{minutes} ph√∫t {sec} gi√¢y" if minutes else f"{sec} gi√¢y"

# Error handler
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f'Update "{update}" g√¢y l·ªói "{context.error}"', exc_info=True)

# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o b·∫°n! Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    # Ensure chat dict
    user_dict = data_store.setdefault(chat_id, {})

    # If input is a name (not a button)
    all_buttons = [b for row in buttons for b in row]
    if text not in all_buttons and len(text) >= 1:
        name = text.upper()
        context.user_data['current_name'] = name
        user_dict.setdefault(name, {"actions": {}})
        await update.message.reply_text(
            f"Ch√†o {name}! B·∫°n c√≥ th·ªÉ ch·ªçn m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
            reply_markup=keyboard
        )
        return

    # Must have a name chosen
    if 'current_name' not in context.user_data:
        await update.message.reply_text(
            "Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªõc khi thao t√°c.", reply_markup=keyboard
        )
        return

    # Ensure name dict exists
    name = context.user_data['current_name']
    user_data = user_dict.setdefault(name, {"actions": {}})

    now = datetime.datetime.now()

    # "üîô ƒê√É QUAY L·∫†I" action
    if text == "üîô ƒê√É QUAY L·∫†I":
        msg = f"üîö {name} ƒë√£ k·∫øt th√∫c. Th·ªëng k√™:\n"
        for action, info in user_data["actions"].items():
            # Finalize if running
            if info.get("start_time") is not None:
                duration = (now - info["start_time"]).total_seconds()
                info.setdefault("durations", []).append(duration)
                info["total_time"] = info.get("total_time", 0) + duration
                info["last_duration"] = duration
                info["start_time"] = None

            count = info.get("count", 0)
            total_time = info.get("total_time", 0)
            last_duration = info.get("last_duration", 0)

            warn = []
            if count > max_counts.get(action, count):
                warn.append(f"v∆∞·ª£t s·ªë l·∫ßn ({count}/{max_counts[action]})")
            if total_time > time_limits.get(action, 0) * 60 * count:
                warn.append(f"v∆∞·ª£t th·ªùi gian ({format_seconds(total_time)})")

            warning_text = " ‚ö†Ô∏è " + ", ".join(warn) if warn else ""

            msg += (
                f"- {action} l·∫ßn n√†y: {format_seconds(last_duration)}\n"
                f"  T·ªïng th·ªùi gian: {format_seconds(total_time)} ({count} l·∫ßn){warning_text}\n"
            )

        await update.message.reply_text(msg, reply_markup=keyboard)
        return

    # If action button pressed
    if text in all_buttons:
        action = text
        info = user_data["actions"].setdefault(action, {
            "count": 0,
            "total_time": 0.0,
            "start_time": None,
            "last_duration": 0
        })

        # If already running
        if info["start_time"] is not None:
            elapsed = (now - info["start_time"]).total_seconds()
            await update.message.reply_text(
                f"‚ö†Ô∏è B·∫°n ƒëang th·ª±c hi·ªán {action}, ƒë√£ {format_seconds(elapsed)}.",
                reply_markup=keyboard
            )
            return

        # Check count
        if info["count"] >= max_counts.get(action, float('inf')):
            await update.message.reply_text(
                f"‚ö†Ô∏è B·∫°n ƒë√£ v∆∞·ª£t s·ªë l·∫ßn t·ªëi ƒëa cho {action}.",
                reply_markup=keyboard
            )
            return

        # Start action
        info["count"] += 1
        info["start_time"] = now
        msg = f"{name} ƒë√£ b·∫Øt ƒë·∫ßu {action} l√∫c {now.strftime('%H:%M:%S')}"
        if action in time_limits:
            msg += f" (Gi·ªõi h·∫°n {time_limits[action]} ph√∫t m·ªói l·∫ßn)."
        await update.message.reply_text(msg, reply_markup=keyboard)
        return

    # Default fallback
    await update.message.reply_text(
        "Vui l√≤ng nh·∫≠p t√™n n·∫øu ch∆∞a c√≥ ho·∫∑c ch·ªçn m·ª•c b√™n d∆∞·ªõi.",
        reply_markup=keyboard
    )

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_dict = data_store.get(chat_id, {})
    rows = []
    now = datetime.datetime.now()

    for name, user_data in user_dict.items():
        for action, info in user_data.get("actions", {}).items():
            if info.get("start_time") is not None:
                duration = (now - info["start_time"]).total_seconds()
                info.setdefault("durations", []).append(duration)
                info["total_time"] += duration
                info["last_duration"] = duration
                info["start_time"] = None

            rows.append({
                "T√™n nh√¢n vi√™n": name,
                "H√†nh ƒë·ªông": action,
                "S·ªë l·∫ßn": info.get("count", 0),
                "T·ªïng th·ªùi gian (ph√∫t)": round(info.get("total_time", 0) / 60, 1),
                "Th·ªùi gian chi ti·∫øt": format_seconds(info.get("total_time", 0)),
                "Danh s√°ch (ph√∫t:gi√¢y)": ", ".join(format_seconds(d) for d in info.get("durations", []))
            })

    if not rows:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
        return

    df = pd.DataFrame(rows)
    fname = f"data_{chat_id}_{now.strftime('%Y%m%d_%H%M%S')}.xlsx"
    df.to_excel(fname, index=False)

    with open(fname, "rb") as f:
        await update.message.reply_document(f)
    os.remove(fname)
    data_store[chat_id] = {}
    await update.message.reply_text("‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu v√† reset th·ªëng k√™.")

if __name__ == "__main__":
    TOKEN = os.getenv("TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Bot is running...")
    app.run_polling()
